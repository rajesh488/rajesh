html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title> Chatbot</title>
    <link rel="stylesheet" href="style2.css">
</head>
<body>
    <div class="chat-container">
        <div class="chat-header">
            <h3>Plant healer Chatbot</h3>
        </div>
        <div class="chat-messages" id="chat-messages"></div>
        <div class="chat-input-container">
            <input type="text" id="user-input" placeholder="Type your message...">
            <button id="send-button">Send</button>
        </div>
    </div>
    <script src="script.js"></script>
</body>
</html>

css
body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    background: url('310407.jpg') no-repeat center center fixed;
    background-size: cover;
    animation: zoomEffect 10s infinite alternate ease-in-out;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    color: #e0e0e0;
    position: relative;
}

/* Background Zoom-In and Zoom-Out Animation */
@keyframes zoomEffect {
    0% {
        background-size: 100%;
    }
    100% {
        background-size: 120%;
    }
}

.chat-container {
    width:35%;
    max-width: 800px;
    background-color: #2a2a2a;
    border-radius: 10px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
    overflow: hidden;
    display: flex;
    flex-direction: column;
    height: 80vh;
    border: 2px solid #4CAF50;
    position: fixed;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    z-index: 1000;
}

/* Chat Header */
.chat-header {
    background-color:rgba(0, 0, 0, 0.253);
    color:white;
    padding: 10px;
    text-align: center;
    font-size: 1.4rem;
    font-weight: bold;
    text-transform: uppercase;
    letter-spacing: 1px;
    display: flex;
    justify-content: center;
    align-items: center;
    position: relative;
    font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;
}



/* Chat Messages */
.chat-messages {
    flex-grow: 1;
    padding: 20px;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    background-color: #252525;
}

.message {
    display: flex;
    align-items: flex-start;
    margin-bottom: 15px;
    max-width: 80%;
    word-wrap: break-word;
}

.user-message {
    align-self: flex-end;
    text-align: right;
    justify-content: flex-end;
}

.bot-message {
    align-self: flex-start;
    text-align: left;
    justify-content: flex-start;
}

.message-content {
    padding: 12px;
    border-radius: 10px;
    word-wrap: break-word;
    display: inline-block;
    max-width: 75%;
    white-space: pre-line;
    font-size: 1rem;
}

.user-message .message-content {
    background-color: #4a90e2;
    color: white;
    text-align: left;
}

.bot-message .message-content {
    background-color: #3a3a3a;
    color: white;
    text-align: left;
}

/* Remove empty bullet points */
.bot-message .message-content:empty::before {
    content: none;
}

/* Chat Input Box */
.chat-input-container {
    display: flex;
    justify-content: center; /* Centering input and button */
    align-items: center;
    padding: 10px;
    background-color: #2a2a2a;
    border-top: 2px solid #4CAF50;
}

#user-input {
    width: 50%;  /* Reduced width */
    padding: 6px;
    border: none;
    border-radius: 10px;
    font-size: 1rem;
    background-color: #3a3a3a;
    color: #e0e0e0;
    outline: none;
    text-align: center; /* Center text inside input */
}

#send-button {
    padding: 6px 12px;  /* Smaller button */
    background-color: #3d82eb;
    color: #fff;
    border: none;
    border-radius: 10px;
    margin-left: 10px;
    cursor: pointer;
    font-size: 0.9rem; /* Slightly smaller text */
    transition: transform 0.2s ease-in-out, background-color 0.2s;
    width:150px;
}

#send-button:hover {
    background-color: #0052b1;
    transform: scale(1.1);
}

#send-button:active {
    transform: scale(0.95);
}

/* Responsive Design */
@media (max-width: 1024px) {
    .chat-container {
        width: 60%;
    }
}

@media (max-width: 768px) {
    .chat-container {
        width: 80%;
        height: 85vh;
    }
}

/* Scrollbar Styles */
::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #2a2a2a;
}

::-webkit-scrollbar-thumb {
    background: #4a4a4a;
    border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
    background: #5a5a5a;
}
.profile-image {
    width: 30px;
    height: 30px;
    border-radius: 50%;
    object-fit: cover;
}

bot js

const API_KEY = 'AIzaSyAaO4yCc9lUqAJRFv6xjRaQFP3aMYFJfGk'; 
const API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent';
const chatMessages = document.getElementById('chat-messages');
const userInput = document.getElementById('user-input');
const sendButton = document.getElementById('send-button');
async function generateResponse(prompt) {
    const response = await fetch(`${API_URL}?key=${API_KEY}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            contents: [
                {
                    parts: [
                        {
                            text: prompt
                        }
                    ]
                }
            ]
        })
    });

    if (!response.ok) {
        throw new Error('Failed to generate response');
    }

    const data = await response.json();
    return data.candidates[0].content.parts[0].text;
}

function cleanMarkdown(text) {
    return text
        .replace(/#{1,6}\s?/g, '')
        .replace(/\*\*/g, '')
        .replace(/\n{3,}/g, '\n\n')
        .trim();
    }

function addMessage(message, isUser) {
    const messageElement = document.createElement('div');
    messageElement.classList.add('message');
    messageElement.classList.add(isUser ? 'user-message' : 'bot-message');
    const profileImage = document.createElement('img');
    profileImage.classList.add('profile-image');
    profileImage.src = isUser ? 'user.jpg' : 'bot.jpg';
    profileImage.alt = isUser ? 'User' : 'Bot';
    const messageContent = document.createElement('div');
    messageContent.classList.add('message-content');
    messageContent.textContent = message;
    messageElement.appendChild(profileImage);
    messageElement.appendChild(messageContent);
    chatMessages.appendChild(messageElement);
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

async function handleUserInput() {
    const userMessage = userInput.value.trim();
    if (userMessage) {
        addMessage(userMessage, true);

        userInput.value = '';

        sendButton.disabled = true;
        userInput.disabled = true;

        try {
            const botMessage = await generateResponse(userMessage);

            addMessage(cleanMarkdown(botMessage), false);
        } catch (error) {
            console.error('Error:', error);

            addMessage('Sorry, I encountered an error. Please try again.', false);
        } finally {
            sendButton.disabled = false;
            userInput.disabled = false;
            userInput.focus();
        }
    }
}

sendButton.addEventListener('click', handleUserInput);

userInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();

        handleUserInput();
    }
});



pop.html

<!DOCTYPE html>
<html>
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>popup</title>
        <link rel="stylesheet" href="pop.css">
    </head>
    <body>
        <div class="container">
            <button type="submit" class="btn" onclick="openpopup()">Submit</button>
            <div class="popup" id="popup">
                <img src="404-tick.png" alt="tick">
                    <h2>Thank you!</h2>
                    <p>Your submission has been received.</p>
                    <button type="button" onclick="closepopup()">OK</button>
                </div>
        </div>

        <script>
            let popup = document.getElementById('popup');
            function openpopup(){
                popup.classList.add("open-popup");
            }
            function closepopup(){
                popup.classList.remove("open-popup");
            }
        </script>
    </body>
</html>


css

 *{
    margin:0;
    padding:0;
    box-sizing:border-box;
    font-family:'poppins',sans-serif;
 }
 .container{
        width:100%;
        height:100vh;
        background:#3c5077;
        display:flex;
        justify-content:center;
        align-items:center;
 }
 .btn{
    padding: 10PX 60PX;
    background: #fff;
    border:0;
    outline:none;
    cursor:pointer;
    font-size: 22px;
    font-weight: 500;
    border-radius: 30px;
 }
 .popup{
    width: 400px;
    background: #fff;
    border-radius: 6px;
    position:absolute;
    top:0%;
    left:50%;
    transform:translate(-50%,-50%) scale(0.1);
    text-align: center;
    padding:0 30px 30px;
    color:#333;
    visibility: hidden;
    transition: transform 0.4s, top 0.6s;
 }
 .open-popup{
    visibility: visible;
    top: 50%;
    transform:translate(-50%,-50%) scale(1);
 }
 .popup img{
    width:100px;
    margin-top: -50px;
    border-radius: 50%;
    box-shadow:0 2px 5px rgba(0,0,0,0.2);
 }
 .popup h2{
    font-size: 38px;
    font-weight: 500;
    margin:30px 0 10px;
 }
 
 .popup button{
    width: 100%;
    margin-top: 50px;
    padding: 10px 0;
    background: #6fd649;
    color:#fff;
    border:0;
    outline: none;
    font-size:18px;
    border-radius: 18px;
    cursor:pointer;
    box-shadow:0 5px 5px rgba(0,0,0,0.2);
 }
