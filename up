main.js

import streamlit as st
import random
import time
import backend
# Streamed response emulator
def response_generator(prompt):
    response = backend.GenerateResponse(prompt)
    for word in response.split():
        yield word + " "
        time.sleep(0.05)


.title("Plant healer")


# Initialize chat history
if "messages" not in st.session_state:
    st.session_state.messages = []

# Display chat messages from history on app rerun
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# Accept user input
if prompt := st.chat_input("What is up?"):
    # Add user message to chat history
    st.session_state.messages.append({"role": "user", "content": prompt})
    # Display user message in chat message container
    with st.chat_message("user"):
        st.markdown(prompt)

    # Display assistant response in chat message container
    with st.chat_message("assistant"):
        response = st.write_stream(response_generator(prompt))
    # Add assistant response to chat history
    st.session_state.messages.append({"role": "assistant", "content": response})



backend.py

import google.generativeai as genai

# Securely configure the API key from environment variables
genai.configure(api_key="AIzaSyA0_XFiqXm1tpZOBk8OdpEexlliusR3ZNs")

# Function to list available AI models
def list_models():
    try:
        models = genai.list_models()
        print("\nAvailable Models:")
        for model in models:
            print(f"- {model.name}")  # Extract and print the correct model names
        print("\nPlease update the model name in the code if needed.\n")
    except Exception as e:
        print(f"Error retrieving models: {e}")

# Function to generate plant care responses
def GenerateResponse(input_text, model_name="models/gemini-pro"):
    prompt = (
        "you are a doctor for plants to solve diseases\n"
        "input: who are you\n"
        "output: I am a plant care chatbot\n"
        "input: what all can you do?\n"
        "output: I can help with any plant care problems that you might be facing! How can I help?\n"
        "input: My plant has brown spots on its leaves. What should I do?\n"
        "output: This could be a fungal infection. Try trimming affected leaves and applying a neem oil spray.\n"
        "input: The leaves have black spots. What’s wrong?\n"
        "output: Black spots often indicate a fungal infection like Black Spot Disease. Improve air circulation and apply a fungicide.\n"
        "input: My plant leaves are turning yellow. Why?\n"
        "output: Yellow leaves can result from overwatering, nutrient deficiency, or pests. Check soil moisture and fertilize if needed.\n"
        "input: My plant is wilting even though I water it regularly.\n"
        "output: Wilting despite watering might indicate root rot. Ensure good drainage and avoid overwatering.\n"
        "input: The leaves of my plant are drooping. What can I do?\n"
        "output: Drooping leaves may signal underwatering, overwatering, or temperature stress. Check soil moisture and adjust care.\n"
        "input: What are common signs of plant diseases?\n"
        "output: Common signs include yellowing leaves, spots, wilting, mold, and stunted growth. Let me know your plant’s symptoms!\n"
        f"input: {input_text}\n"
        "output:"
    )

    try:
        # Use the correct model name
        model = genai.GenerativeModel(model_name)  
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        return f"An error occurred: {e}"

# Main execution loop
#if _name_ == "_main_":
  #  print("Welcome to the Plant Care Chatbot!")
  #  print("Listing available models for compatibility...\n")
   # list_models()  # Ensure models are listed before proceeding

   # model_name = input("\nEnter the correct model name from the list above (default: models/gemini-pro): ").strip()
   # if not model_name:
    #    model_name = "models/gemini-pro"  # Default model

   # while True:
     #   try:
    #        user_input = input("\nEnter your plant-related question (or type 'exit' to quit): ")
     #       if user_input.lower() == 'exit':
     #           print("Goodbye!")
     #           break
      #      response = GenerateResponse(user_input, model_name)
      #      print(f"\nPlant Doctor: {response}")
      #  except Exception as e:
      #      print(f"An error occurred: {e}")
