<!DOCTYPE html>
<html>
<head>
    <title>Gemini Image Explanation</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
        }

        #image-container {
            margin-bottom: 20px;
            border: 1px solid #ccc;
            padding: 10px;
            text-align: center;
        }

        #image-preview {
            max-width: 400px;
            max-height: 300px;
            display: block;
            margin: 0 auto;
        }

        #explanation {
            margin-top: 20px;
            padding: 10px;
            border: 1px solid #ccc;
            width: 80%;
            text-align: left;
        }

        #error-message {
            color: red;
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <h1>Gemini Image Explanation</h1>

    <div id="image-container">
        <input type="file" id="image-input" accept="image/*">
        <img id="image-preview" src="#" alt="Image Preview" style="display: none;">
    </div>

    <button id="explain-button" disabled>Explain Image</button>

    <div id="explanation">
        <h2>Explanation:</h2>
        <p id="explanation-text">Waiting for image and explanation...</p>
    </div>

    <div id="error-message"></div>

    <script>
        const imageInput = document.getElementById('image-input');
        const imagePreview = document.getElementById('image-preview');
        const explainButton = document.getElementById('explain-button');
        const explanationText = document.getElementById('explanation-text');
        const errorMessage = document.getElementById('error-message');

        const API_KEY = ""; // Replace with your actual API key

        let base64Image = null;  // Store the base64 encoded image

        imageInput.addEventListener('change', function(event) {
            const file = event.target.files[0];

            if (file) {
                const reader = new FileReader();

                reader.onload = function(e) {
                    base64Image = e.target.result.split(',')[1]; // Extract base64 data
                    imagePreview.src = e.target.result;
                    imagePreview.style.display = 'block';
                    explainButton.disabled = false;
                    errorMessage.textContent = ""; // Clear any previous errors
                }

                reader.readAsDataURL(file);
            } else {
                base64Image = null;
                imagePreview.src = '#';
                imagePreview.style.display = 'none';
                explainButton.disabled = true;
                explanationText.textContent = "Waiting for image and explanation...";
            }
        });

        explainButton.addEventListener('click', function() {
            if (!base64Image) {
                errorMessage.textContent = "Please select an image first.";
                return;
            }

            explanationText.textContent = "Loading explanation...";  // Show loading message
            errorMessage.textContent = "";

            // Prepare the API request
            const url = https://generativelanguage.googleapis.com/v1beta/models/gemini-pro-vision:generateContent?key=${API_KEY};
            const headers = {
                'Content-Type': 'application/json'
            };
            const data = JSON.stringify({
                contents: [{
                    parts: [
                        { text: "Explain what you see in this image. Be detailed." },
                        { inline_data: { mime_type: "image/jpeg", data: base64Image } }  // Adjust mime_type if necessary
                    ]
                }]
            });

            // Make the API call using fetch
            fetch(url, {
                method: 'POST',
                headers: headers,
                body: data
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(HTTP error! Status: ${response.status});
                }
                return response.json();
            })
            .then(data => {
                console.log("API Response:", data); // Log the full response for debugging

                // Extract the explanation from the response.  Adjust this based on the API response structure!
                try {
                  const generatedText = data.candidates[0].content.parts[0].text;
                  explanationText.textContent = generatedText;
                } catch (error) {
                  console.error("Error parsing response:", error);
                  explanationText.textContent = "Error parsing the API response. Check the console for details.";
                  errorMessage.textContent = "Failed to extract the explanation from the response. Check the console for errors.";

                }
            })
            .catch(error => {
                console.error("API Error:", error);
                explanationText.textContent = "An error occurred while getting the explanation.";
                errorMessage.textContent = API Error: ${error.message}.  Check the console for details.;
            });
        });

    </script>
</body>
</html>
